import { isExtrictedObject } from 'helpers/object';
import { capitalize } from 'helpers/string';
import { getErrorVerifyPk } from './validate';

export async function upsert(model, values) {
  if (!isExtrictedObject(values)) return model.findByPk(values);
  if (!values.id) return model.create(values);
  const instance = await model.findByPk(values.id);
  return instance.update(values);
}

export function upsertMany(model, values) {
  return Promise.all(values.map(val => upsert(model, val)));
}

export async function fullUpdate(model, id, body) {
  const instance = await model.findByPk(id);
  const allPromisses = Object.keys(model.associations).map(async (asscKey) => {
    if (body[asscKey]) {
      const result = await upsertMany(model.associations[asscKey].target, body[asscKey]);
      await instance[`set${capitalize(asscKey)}`](result);
      return 1;
    }
    return 0;
  });

  await Promise.all(allPromisses);

  return instance.update(body);
}

export async function fullCreate(model, body) {
  const instance = await model.create(body);
  const allPromisses = Object.keys(model.associations).map(async (asscKey) => {
    if (body[asscKey]) {
      const result = await upsertMany(model.associations[asscKey].target, body[asscKey]);
      await instance[`set${capitalize(asscKey)}`](result);
      return 1;
    }
    return 0;
  });

  await Promise.all(allPromisses);

  return instance.update(body);
}

export async function verifyPk(model, id) {
  const error = await getErrorVerifyPk(model, id);
  if (error !== null) throw new Error(error);
}

export function autoGeneratedFields(model) {
  return (
    Object.values(model.rawAttributes)
      // eslint-disable-next-line no-underscore-dangle
      .filter(field => field._autoGenerated)
      .map(field => field.fieldName)
  );
}

export function unupdateFields(model) {
  return Object.values(model.rawAttributes)
    .filter(field => field.canUpdate === false)
    .map(field => field.fieldName);
}
